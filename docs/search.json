[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "軟體需求工程",
    "section": "",
    "text": "摘要\n軟體需求（Software Requirements）是指在開發軟體系統時，對系統功能、性能、行為、設計約束及其他相關特性的描述。這些需求是軟體開發過程中的基礎，用於指導設計、開發、測試和維護工作。",
    "crumbs": [
      "摘要"
    ]
  },
  {
    "objectID": "content/introduction.html",
    "href": "content/introduction.html",
    "title": "1  理清基礎概念",
    "section": "",
    "text": "1.1 從系統 \\(\\neq\\) 資訊系統說起\n在今日的數位社會，從我們早晨醒來滑開的智慧型手機，到支撐全球金融市場的複雜交易系統，再到引領未來的生成式 AI，背後的核心驅動者都是同一個無形卻又無所不在的力量 -—— 電腦軟體 (Computer Software)。如果說硬體是機器的骨骼，那麼軟體就是其靈魂。它是一系列指令、資料與程式的集合，賦予冰冷的矽晶片思考、決策與執行的能力。\n軟體的重要性已從單純的工具，演變為現代文明的基礎設施。它不僅是企業營運的中樞，更是個人生活、社會互動乃至國家安全的基石。正因為軟體扮演著如此關鍵的角色，如何精準地定義、規劃並打造出符合需求的軟體，便成為至關重要的課題。這一切的起點，就是「軟體需求工程」。\n然而，要做好需求工程，我們必須先理解我們面對的「軟體」究竟是什麼。本文將從軟體分類的演進談起，比較早期大型主機時代與現今的差異，並深入探討這些差異如何根本性地改變了軟體需求工程的思維與方法。\n我們經常會在言談間聽到，或媒體上看到「某企業導入或建置○○系統，用以提升作業效率」這類報導，這裡所稱的「系統」，究竟指的是什麼呢？ 從宏觀的層次（context）來看，這裡所稱的系統可以看作是：「企業或組織為處理特定問題，或達成某個業務目標所採行的解決方案」。由於資訊科技的發展，建置、部署或導入資訊系統，可能在解決方案中佔有舉足輕重的份量，甚至扮演關鍵的角色，但不代表它是解決方案中唯一的元素。通常一個完整的解決方案需要不同的元素組成，除了資訊系統外，可能還包括：人員、資料、流程，甚至法規調適等。由 圖 1.1 所示，我們可以得知解決方案（系統）並不等同於資訊系統，而以下列式子來表達或許更為適切。\n(解決方案 = 系統) \\(\\neq\\) 資訊系統\n再以微觀的層次來看解決方案中各元素，一般來說，資訊系統由軟體和硬體組成，而人員也可以再分為不同類型的使用者，例如管理階層，或是外部使用者等。再進一步探究，可以列出每項元素的需求。我們以用某餐廳導入「線上點餐系統」為例，說明如下：\n類似線上點餐系統這些需求，由於規模不大，且有相當的潛在客戶，可能有現成的解決方案可以購置或租賃（包括資訊系統），但餐廳本身的人員或流程等仍需適度採行配套措施。至於一定規模以上的專案（要達成某個業務目標），其解決方案（系統）之導入或建置，其執行面可能需要用到系統工程1方法，例如，有論者就認為臺灣政府先前推動數位身分證換發計畫，未採行系統工程方法，將增加失敗風險2（行政院在2021年1月21日院會決定暫緩換發新式身分證計畫）。\n以資訊系統為主要手段之解決方案，無論規模大小，軟體的表現能否滿足需求，其運行之順暢與否，攸關整體解決方案之成敗，可謂是整體解決方案關鍵因素。惟近年來軟體技術發展快速，不斷推陳出新，是以如何掌握軟體需求、設計完善的軟體，對資訊系統而言至關重要。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>理清基礎概念</span>"
    ]
  },
  {
    "objectID": "content/introduction.html#從系統-neq-資訊系統說起",
    "href": "content/introduction.html#從系統-neq-資訊系統說起",
    "title": "1  理清基礎概念",
    "section": "",
    "text": "圖 1.1: 解決方案的組成元素\n\n\n\n\n\n資訊系統需求：\n\n硬體需求：需要採購多少台伺服器？需要什麼規格的網路設備？端點需要用平板，或設置 Kiosk 嗎？\n軟體需求：需要開發或購買哪些應用程式？需要什麼作業系統？需要資料庫嗎？（有可能直接購買或租賃現成的軟體嗎？）\n\n人員需求：需要操作人員？需要對他們進行什麼樣的訓練？\n資料需求：需要收集、儲存、處理哪些資料？（例如：餐廳客戶需要先行註冊嗎？需要填哪些資料？）\n流程需求：為了配合新系統，現有的工作流程需要如何調整？（例如：出餐的流程？結帳的流程，萬一系統當機怎麼辦？）",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>理清基礎概念</span>"
    ]
  },
  {
    "objectID": "content/introduction.html#軟體的分類演進及挑戰",
    "href": "content/introduction.html#軟體的分類演進及挑戰",
    "title": "1  理清基礎概念",
    "section": "1.2 軟體的分類、演進及挑戰",
    "text": "1.2 軟體的分類、演進及挑戰\n在電腦發展的早期，特別是大型主機 (Mainframe) 稱霸的時代，軟體相對單純。當時，習慣用二分法來理解軟體世界：\n\n系統軟體 (System Software): 負責管理與控制電腦硬體資源，作為應用程式與硬體之間的橋樑, 管理硬體資源、與硬體緊密耦合，提供基礎服務給其他軟體。它們是平台的基礎，通常由專業技術人員使用，一般使用者不會直接操作它來完成特定業務。\n例如，作業系統 (如 IBM 的 OS/360)、編譯器 (Compilers)、公用程式 (Utilities)、驅動程式 (Drivers)等。 系統軟體強調效能與穩定性，其價值在於讓硬體可用、可控、有效率。\n應用軟體 (Application Software):\n建構在系統軟體提供的基礎服務之上，旨在為使用者解決特定領域的問題或完成特定任務。 應用軟體多是由企業內部的IT部門，或是委由軟體公司，根據企業的需求開發軟體。 例如，企業的薪資系統、庫存管理系統、銀行的帳務處理程式等。\n應用軟體強調系統交付、後續維護更新速度的要求，其價值在於滿足使用者的業務需求。\n\n在那個時代，這種分類清晰明瞭，足以涵蓋當時的軟體形態。系統與應用涇渭分明，其相應的需求對象也相對明確。\n\n1.2.1 現今軟體的多維度光譜\n隨著個人電腦、網際網路、行動裝置、雲端運算與人工智慧的崛起，軟體的樣貌發生了天翻地覆的變化。過去的二分法已不足以描述當今複雜的軟體生態系。現在，我們需要從多個維度來為軟體分類：\n\n\n\n\n\n\n\n\n分類維度\n主要類別\n說明\n\n\n\n\n部署模式\n• 本地部署軟體 (On-Premise)• 軟體即服務 (SaaS)• 平台即服務 (PaaS)• 基礎設施即服務 (IaaS)\n軟體不再只是安裝在本地機器，更多是以服務形式透過雲端提供。\n\n\n應用平台\n• 桌面應用程式 (Desktop App)• 網頁應用程式 (Web App)• 行動應用程式 (Mobile App)• 嵌入式軟體 (Embedded Software)\n軟體的執行環境從單一的電腦擴展到瀏覽器、手機、手錶、汽車、物聯網(IoT)設備等。\n\n\n系統架構\n• 單體式架構 (Monolithic)• 微服務架構 (Microservices)\n從一個龐大、緊密耦合的系統，演變為由多個小型、獨立部署的服務組成的鬆散耦合系統。\n\n\n應用領域\n• 企業資源規劃 (ERP)• 客戶關係管理 (CRM)• 數據分析與商業智慧 (BI)• 人工智慧與機器學習系統 (AI/ML)\n軟體深入到各行各業的特定領域，並產生了高度專業化的類別。\n\n\n開發與授權\n• 商用現成軟體 (COTS)• 客製化軟體 (Custom Software)• 開源軟體 (Open Source)\n軟體的取得與開發方式也變得多元，不再只有委託開發一種模式。\n\n\n\n顯然，現代軟體已從一個「系統 vs. 應用」的線性的二分法，演變成一個多維度、跨領域的複雜生態系。\n另一種分類是從軟體服務的對象及其功能性質著眼，並聚焦在上述的開發與授權角度，將軟體分成通用型軟體（generic software）及定製型軟體（customed software）二大類。通用型軟體是為普遍使用所設計的軟體，可以滿足許多客戶的一般要求，通常是以現成產品（commercial off-the-shielf, COTS）的方式發行，公開在市場上販售。此類產品的例子包括用於各種行動裝置的應用程式（APP）、用於 PC 的軟體（文字處理器-Word、電子試算表及繪圖軟體等），廣義來說，也包括為特定領域所設計的垂直應用系統（vertical applications），例如圖書館資訊系統、會計系統，或醫療診所的掛號及病歷管理系統等。 客製型軟體則是根據客戶預先定義的規格，委託軟體開發公司（或由組織內部的IT部門自行發展），為滿足客戶的特定需求而開發的軟體，只提供給特定的客戶或使用者操作使用。此類軟體通常是為支援特定的業務流程，例如，道路交通管制系統、空氣品質監測資料管理系統、公務機關的入口網站等。\n通用型軟體和定製型軟體的關鍵區別在於，通用性軟體的規格是由開發者所掌握及控制，這意味著，如果他們遇到開發或是後續維護上的問題，他們可以重新調整或更新其內容。對於客製性軟體，其需求及規格則由委託的客戶所製定及規範，承攬開發的軟體公司必須按照客戶所要求的規格開發軟體。詳如 圖 1.2 的說明\n\n\n\n\n\n\n圖 1.2: 軟體的分類\n\n\n\n\n\n1.2.2 影響與挑戰\n軟體分類方式的演變，不僅僅是術語的更新，它深刻地反映了軟體開發本質的變化，並對軟體需求工程帶來了四大核心挑戰與思維轉變：\n\n利害關係人 (Stakeholders) 的爆炸性增長 過往在大型主機時代，應用軟體的使用者通常是企業內部特定部門的員工（如財務部、倉儲部），利害關係人相對單純，需求來源集中，容易訪談與定義。但現今的軟體則不然， 以一個SaaS行動應用為例，利害關係人可能包括：\n\n\n終端使用者 (需求分散且多變，容許匿名不特定的使用者)\n產品經理 (負責功能規劃)\n行銷團隊 (關心用戶增長與轉換率)\n維運團隊 (DevOps) (關心系統穩定性與部署效率)\n資安與法務團隊 (關心數據隱私與合規性，如 GDPR)\n第三方開發者 (若軟體提供 API) 在如此多元複雜的情況下，需求工程師不能再只靠幾場訪談就完成工作。他們必須使用用戶研究、數據分析、A/B測試、問卷調查等多種方法來捕捉廣泛且時常相互衝突的需求，並具備更強的溝通、協調與優先級排序能力。\n\n\n非功能性需求 (Non-Functional Requirements) 的全面升級 非功能性需求（如效能、可靠性）在過往對軟體而言固然重要，但通常是在一個封閉、可控的企業內部網路中進行評估。但在雲端與行動優先的時代，非功能性需求的重要性急遽攀升，甚至成為產品成敗的關鍵：\n\n\n擴展性 (Scalability): 能否應對雙十一的瞬間流量洪峰？\n可用性 (Availability): 能否達到 99.99% 的線上時間？\n安全性 (Security): 如何保護用戶數據不被竊取？\n使用者體驗 (Usability/UX): 介面是否直觀易用，能否留住使用者？\n互操作性 (Interoperability): 如何與其他微服務或第三方 API 順暢協作？\n\n需求工程必須從專案一開始就將非功能性需求視為優先考量事項，而非事後補充。必須用量化指標（如：頁面載入時間&lt;2秒，API回應時間&lt;200ms）來精準定義，並將其納入測試案例。\n\n系統邊界的模糊化與依賴性 過往一個應用軟體的邊界是清晰的，它就是那套安裝在主機上的程式，與外界的互動有限。 現今軟體可視作是一個「系統的系統」。例如，一個電商App，其系統邊界極度模糊：前端運行在用戶手機上，後端由數十個微服務構成，支付功能依賴Stripe或藍新，地圖功能依賴Google Maps，簡訊通知依賴Twilio。 對於現今軟體的需求不能侷限只是分析「內部」功能。API合約 (API Contract) 和服務等級協議 (SLA) 的定義變得至關重要。工程師必須深入分析對外部服務的依賴關係、風險與備援方案。系統的穩定性不再只由自己決定，而是整個生態系的穩定性。\n需求生命週期的持續演化 傳統的軟體開發常採用瀑布模型，需求在開發前需要被完整定義並「凍結」，變更成本極高，發布週期可能長達數年。 在敏捷 (Agile) 與 DevOps 文化下，軟體是持續交付與演進的。需求被視為一個動態的待辦清單 (Backlog)，隨時根據市場反饋進行調整。發布週期可以縮短到每週、每天甚至每小時。\n\n對於軟體需求的掌握，已從一個「階段性」工作，轉變為一個「持續性」的活動。重點從撰寫一份完美、詳盡、一成不變的需求規格文件，轉變為有效地管理一個動態、優先級清晰的需求待辦清單**，並建立快速的回饋循環。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>理清基礎概念</span>"
    ]
  },
  {
    "objectID": "content/introduction.html#軟體工程",
    "href": "content/introduction.html#軟體工程",
    "title": "1  理清基礎概念",
    "section": "1.3 軟體工程",
    "text": "1.3 軟體工程\n1960 年代末期，隨著電腦硬體性能的快速成長，軟體的規模與複雜度也急遽增加。然而，軟體開發仍停留在個人式的「藝術創作」階段，導致專案時程落後、預算超支、軟體品質低劣、軟體難以維護與修改等問題。為了應對此危機，1968 年的 NATO 會議上首次提出了軟體工程 (Software Engineering) 一詞，倡議將工程學的原則，應用在軟體開發，以解決當時的困境。\n\n1.3.1 定義與內涵\n軟體工程 (Software Engineering) 是一門將系統化、紀律化、可量化的方法應用於軟體開發、營運和維護的學科；目的在透過專業知識、工具與技術，在有限的資源（時間、成本、人力）內，打造出滿足使用者需求、可靠、有效率且易於維護的軟體產品；而其範疇涵蓋了整個軟體生命週期的管理與實踐。一般來說，軟體工程的內涵包括：\n\n工程方法： 強調流程、紀律與可重複性，擺脫過去「手工藝」式的軟體開發模式，引進如需求分析、設計、測試、專案管理等系統化流程。\n品質保證： 追求軟體的可靠、好用、效率、可維護與可移植等多面向的特性。專案開始前進行估算，並在開發過程中持續追蹤與控制，確保專案在預算內如期如質完成。 團隊協作： 提供方法論與工具，促進團隊成員間的有效溝通與協同作業。 權衡取捨 (trade-offs)： 在有限的資源下，需要在各種相互衝突的目標之間做出明智的決擇（例如，快速交付與功能完整性、效能與開發成本）。這點很重要，但經常被忽略，軟體開發其實就像經濟學家湯瑪斯．索爾（Thomas Sowell）說的「沒有解方，只有取捨（There are no solutions. There are only trade-offs.）\n\n\n\n1.3.2 歷程與挑戰\n基於人們對軟體開發本質的認識逐步深化，自1970年代迄今，軟體工程的發展可概分為以下幾個階段：\n\n結構化時期 (1970s - 1980s)： 以瀑布模型 (Waterfall Model) 為主流，強調線性、循序的流程，嚴謹的階段劃分（需求分析 -&gt; 設計 -&gt; 實作 -&gt; 測試 -&gt; 維護）。此模式適用於需求明確、變動性低的專案，通常透過詳盡的前期規劃來避免風險。\n物件導向時期 (1990s–2000s)： 物件導向程式設計 (OOP) 的興起，促使開發方法轉向以物件為中心的分析與設計 (OOAD)。統一塑模語言 (UML) 成為重要的溝通與設計工具。\n敏捷時期 (2000s - )： 為了應對快速變化的市場需求，敏捷開發 (Agile Development) 應運而生。其核心理念是擁抱變化，透過迭代式 (Iterative) 與漸進式 (Incremental) 的開發方式，縮短開發週期；頻繁交付可用的軟體，並強調與客戶緊密合作，通常以短週期的迭代來及早發現並應對風險。\n\n由於軟體技術不斷推陳出新，現今軟體的樣態極為多元，對軟體工程的應用，也帶來了前所未有的挑戰：\n\n複雜度的巨幅提升： 分散式系統、微服務架構、巨量資料處理等，使得系統的設計與維護變得極為複雜。\n對上市時間 (Time-to-Market) 的極致要求： 市場競爭激烈，產品需要快速迭代與交付，以搶佔先機。\n資訊安全與隱私的嚴峻考驗： 軟體承載了大量的敏感資料，任何資安漏洞都可能造成重大損失。\n跨領域整合的困難： 軟體不再是單一領域的產物，常需與硬體、AI 模型、不同領域的專家進行深度整合。 維護與演化的永續性： 在快速變化的技術環境中，如何確保軟體系統能夠長期、穩定地運行並持續演進，是一大難題。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>理清基礎概念</span>"
    ]
  },
  {
    "objectID": "content/introduction.html#掌握軟體需求的重要性",
    "href": "content/introduction.html#掌握軟體需求的重要性",
    "title": "1  理清基礎概念",
    "section": "1.4 掌握軟體需求的重要性",
    "text": "1.4 掌握軟體需求的重要性\n不論何種軟體類型，如何掌握需求都是軟體工程的最前端工作，也是決定專案成敗的最關鍵階段。其重要性體現在以下幾個方面：\n\n奠定專案的基石： 需求定義了「要做什麼」，是後續所有設計、開發、測試工作的唯一依據。錯誤或模糊的需求，將導致整個專案方向的偏差，如同蓋房子沒有穩固的地基。對各階段的影響和作用如下：\n\n設計： 需求直接決定了系統的架構、功能模組劃分以及技術選型。\n開發： 開發人員根據需求規格撰寫程式碼，實現具體功能。\n測試： 測試案例的設計完全基於需求，用以驗證軟體是否符合預期。\n\n避免無效的投入： 根據統計，越晚發現需求錯誤，修復的成本就越高。在需求階段釐清問題，可以避免後續開發階段的大量重工與資源浪費。\n確保產品的價值： 軟體的最終目的是為使用者或客戶創造價值。唯有準確掌握其真實需求與痛點，才能開發出真正有用、受歡迎的產品。\n建立共識與溝通的橋樑： 詳盡的需求規格是專案關係人（客戶、使用者、開發團隊、管理層）之間溝通的共同語言，有助於建立共識，減少誤解。\n\n晚近以組態驅動開發 (Configuration-Driven Development) 或平台式開發 (Platform-based Development) 為主軸的軟體發展模式，漸成為主流。軟體開發的核心不再是「從無到有地編寫程式碼 (Coding)」，而是「在既有框架內進行配置與擴充 (Configuring)。不論是產品型軟體或客製型軟體，許多開發廠商的作法是拿現成的「模組」、「套件」加以組合拼裝（或是以現成的ERP系統加以微調），類似「樂高組合」的方式的交付軟體，導致客戶的個別性需求受到限制（例如，客戶的作業流程與ERP，或流程引擎套件的作法不同），但開發廠商不願意，或是沒能力修改這些現成組件的程式碼，造成系統功能與客戶期望產生落差，這種趨勢正在從根本上改變了軟體需求工程的面貌與挑戰，我們將在後續另章討論此課題。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>理清基礎概念</span>"
    ]
  },
  {
    "objectID": "content/introduction.html#tldr",
    "href": "content/introduction.html#tldr",
    "title": "1  理清基礎概念",
    "section": "tl;dr",
    "text": "tl;dr\n\n企業或組織為處理特定問題，或達成某個業務目標所採行的解決方案可以簡稱作系統，特別是以資訊系統作為解決方案的主要手段… 資訊系統可概分為硬體和軟體二部分，而軟體的表現能否滿足需求，其運行之順暢與否，攸關資訊系統，進而整體解決方案之成敗。\n早期軟體分作系統軟體及應用軟體二類，由於技術演進，現今軟體陳現各種不同的樣貌；倘以…可分作嵌入式軟體、產品型軟體及客製型軟體三類。軟體分類方式的演變，不僅僅是術語的更新，它深刻地反映了軟體開發本質的變化，對軟體需求帶來了挑戰與思維轉變。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>理清基礎概念</span>"
    ]
  },
  {
    "objectID": "content/introduction.html#footnotes",
    "href": "content/introduction.html#footnotes",
    "title": "1  理清基礎概念",
    "section": "",
    "text": "系統工程（System Engineering） 是一門跨學科的工程方法，專注於設計、整合和管理複雜系統的整個生命週期（從需求分析、設計、建置、維護，一直到除役）。其核心目標是確保系統的各個組成部分（硬體、軟體、人員、流程等）能協同工作，以滿足整體需求。系統工程強調從全局角度解決問題，而非僅優化單一組成元件。↩︎\n自由時報，2020/03/23 自由共和國》廖宏祥／數位身分證的系統風險 https://talk.ltn.com.tw/article/paper/1360698↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>理清基礎概念</span>"
    ]
  },
  {
    "objectID": "content/sw-requirements.html",
    "href": "content/sw-requirements.html",
    "title": "2  軟體需求",
    "section": "",
    "text": "2.1 軟體需求\n通俗來說，需求 (requirement) 可以被定義為某人想要的任何事物。人們為了解決特定的問題，建置資訊系統，而資訊系統的目的就在於滿足此需求。\n對於軟體需求的定義很多，但就工程\n資訊系統可概分為為在系統開發的背景下，需求被視為系統（尚在專案階段）建成後應具備的特性。需求表達了使用者的必要性以及對系統施加的限制，這些都必須在開發過程中加以考慮。從系統工程師的角度來看，需求也可以被定義為需要構思的東西。儘管定義繁多，但在此介紹由 \\(IEEE\\) \\(610.12-1990\\) 標準（軟體工程術語詞彙表）所提出的需求定義是相當重要的：\n軟體需求（Software Requirements）是指在開發軟體系統時，對系統功能、性能、行為、設計約束及其他相關特性的描述。這些需求是軟體開發過程中的基礎，用於指導設計、開發、測試和維護工作。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>軟體需求</span>"
    ]
  },
  {
    "objectID": "content/sw-requirements.html#ieee-對軟體需求的定義",
    "href": "content/sw-requirements.html#ieee-對軟體需求的定義",
    "title": "2  軟體需求",
    "section": "2.2 IEEE 對軟體需求的定義",
    "text": "2.2 IEEE 對軟體需求的定義\n根據 IEEE 610.12-1990 標準，軟體需求被定義為：\n\n使用者需求（User Requirements）：\n從使用者角度描述系統應提供的功能與特性，通常以自然語言或圖表形式表達，便於非技術人員理解。\n系統需求（System Requirements）：\n詳細描述系統應實現的功能、性能、設計約束及其他特性，通常以技術性語言表達，供開發團隊使用。\n軟體需求規格（Software Requirements Specification, SRS）：\n這是一份正式文件，詳細記錄軟體系統的所有需求，包括功能需求、非功能需求及設計約束。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>軟體需求</span>"
    ]
  },
  {
    "objectID": "content/add-content.html",
    "href": "content/add-content.html",
    "title": "3  Customize",
    "section": "",
    "text": "3.1 Edit and add your pages\nEdit the qmd or md files in the content folder. qmd files can include code (R, Python, Julia) and lots of Quarto markdown bells and whistles (like call-outs, cross-references, auto-citations and much more).\nEach page should start with\nand the first header will be the 2nd level, so ##. Note, there are situations where you leave off\nand start the qmd file with a level header #, but if using the default title yaml (in the --- fence) is a good habit since it makes it easy for Quarto convert your qmd file to other formats (like into a presentation).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Customize</span>"
    ]
  },
  {
    "objectID": "content/add-content.html#edit-and-add-your-pages",
    "href": "content/add-content.html#edit-and-add-your-pages",
    "title": "3  Customize",
    "section": "",
    "text": "---\ntitle: your title\n---\n\n---\ntitle: your title\n---",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Customize</span>"
    ]
  },
  {
    "objectID": "content/add-content.html#add-your-pages-the-project",
    "href": "content/add-content.html#add-your-pages-the-project",
    "title": "3  Customize",
    "section": "3.2 Add your pages the project",
    "text": "3.2 Add your pages the project\n\nAdd the files to _quarto.yml",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Customize</span>"
    ]
  },
  {
    "objectID": "content/customizing.html",
    "href": "content/customizing.html",
    "title": "4  Customization",
    "section": "",
    "text": "4.1 Quarto documentation\nQuarto allow many bells and whistles to make nice output. Read the documentation here Quarto documentation.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Customization</span>"
    ]
  },
  {
    "objectID": "content/customizing.html#examples",
    "href": "content/customizing.html#examples",
    "title": "4  Customization",
    "section": "4.2 Examples",
    "text": "4.2 Examples\nLooking at other people’s Quarto code is a great way to figure out how to do stuff. Most will have a link to a GitHub repo where you can see the raw code. Look for a link to edit page or see source code. This will usually be on the right. Or look for the GitHub icon somewhere.\n\nQuarto gallery\nnmfs-openscapes\nFaye lab manual\nquarto-titlepages Note the link to edit is broken. Go to repo and look in documentation directory.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Customization</span>"
    ]
  },
  {
    "objectID": "content/rendering.html",
    "href": "content/rendering.html",
    "title": "5  Rendering",
    "section": "",
    "text": "5.1 Step 1. Make sure you have a recent RStudio\nThe repo includes a GitHub Action that will render (build) the website automatically when you make changes to the files. It will be pushed to the gh-pages branch.\nBut when you are developing your content, you will want to render it locally.\nHave you updated RStudio since about August 2022? No? Then update to a newer version of RStudio. In general, you want to keep RStudio updated and it is required to have a recent version to use Quarto.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Rendering</span>"
    ]
  },
  {
    "objectID": "content/rendering.html#step-2.-clone-and-create-rstudio-project",
    "href": "content/rendering.html#step-2.-clone-and-create-rstudio-project",
    "title": "5  Rendering",
    "section": "5.2 Step 2. Clone and create RStudio project",
    "text": "5.2 Step 2. Clone and create RStudio project\nFirst, clone the repo onto your local computer. How? You can click File &gt; New Project and then select “Version Control”. Paste in the url of the repository. That will clone the repo on to your local computer. When you make changes, you will need to push those up.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Rendering</span>"
    ]
  },
  {
    "objectID": "content/rendering.html#step-3.-render-within-rstudio",
    "href": "content/rendering.html#step-3.-render-within-rstudio",
    "title": "5  Rendering",
    "section": "5.3 Step 3. Render within RStudio",
    "text": "5.3 Step 3. Render within RStudio\nRStudio will recognize that this is a Quarto project by the presence of the _quarto.yml file and will see the “Build” tab. Click the “Render website” button to render to the _site folder.\nPreviewing: You can either click index.html in the _site folder and specify “preview in browser” or set up RStudio to preview to the viewer panel. To do the latter, go to Tools &gt; Global Options &gt; R Markdown. Then select “Show output preview in: Viewer panel”.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Rendering</span>"
    ]
  },
  {
    "objectID": "content/figures_and_tables.html",
    "href": "content/figures_and_tables.html",
    "title": "6  Figures and Tables",
    "section": "",
    "text": "6.1 Code\nMarkdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Figures and Tables</span>"
    ]
  },
  {
    "objectID": "content/figures_and_tables.html#including-plots",
    "href": "content/figures_and_tables.html#including-plots",
    "title": "6  Figures and Tables",
    "section": "6.2 Including Plots",
    "text": "6.2 Including Plots\nYou can also embed plots and reference them, like so 圖 6.1.\n\n\n\n\n\n\n\n\n圖 6.1: Plot of pressure\n\n\n\n\n\nNote that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Figures and Tables</span>"
    ]
  },
  {
    "objectID": "content/figures_and_tables.html#including-tables",
    "href": "content/figures_and_tables.html#including-tables",
    "title": "6  Figures and Tables",
    "section": "6.3 Including Tables",
    "text": "6.3 Including Tables\nYou can also embed tables and reference them with 表 6.1.\n\nlibrary(knitr)\nkable(head(iris))\n\n\n\n表 6.1: Iris Data\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Figures and Tables</span>"
    ]
  },
  {
    "objectID": "content/code.html",
    "href": "content/code.html",
    "title": "7  Rendering with Code",
    "section": "",
    "text": "7.1 Modify the GitHub Action\nYou can have code (R, Python or Julia) in your qmd file. You will need to have these installed on your local computer, but presumably you do already if you are adding code to your qmd files.\nYou will need to change the GitHub Action in .github/workflows to install these and any needed packages in order for GitHub to be able to render your webpage. The GitHub Action install R since I used that in code.qmd. If you use Python or Julia instead, then you will need to update the GitHub Action to install those.\nIf getting the GitHub Action to work is too much hassle (and that definitely happens), you can alway render locally and publish to the gh-pages branch. If you do this, make sure to delete or rename the GitHub Action to something like\nso GitHub does not keep trying to run it. Nothing bad will happen if you don’t do this, but if you are not using the action (because it keeps failing), then you don’t need GitHub to run it.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Rendering with Code</span>"
    ]
  },
  {
    "objectID": "content/code.html#modify-the-github-action",
    "href": "content/code.html#modify-the-github-action",
    "title": "7  Rendering with Code",
    "section": "",
    "text": "render-and-publish.old_yml",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Rendering with Code</span>"
    ]
  },
  {
    "objectID": "content/code.html#render-locally-and-publish-to-gh-pages-branch",
    "href": "content/code.html#render-locally-and-publish-to-gh-pages-branch",
    "title": "7  Rendering with Code",
    "section": "7.2 Render locally and publish to gh-pages branch",
    "text": "7.2 Render locally and publish to gh-pages branch\nTo render locally and push up to the gh-pages branch, open a terminal window and then cd to the directory with the Quarto project. Type this in the terminal:\nquarto render gh-pages",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Rendering with Code</span>"
    ]
  },
  {
    "objectID": "content/adding-refs.html",
    "href": "content/adding-refs.html",
    "title": "8  References",
    "section": "",
    "text": "Quarto has powerful references functionality. You can easily insert citations from Zotero libraries that you maintain in the cloud (on Zotero). This allows the whole team to update the library and you can sync up to that library. Read about this on the Quarto documentation on citations. Google youtube videos on this also to see it in action.\nAdd a .bib file in to your project or add a linked Zotero library via RStudio in Visual mode with Tools &gt; Project Options… &gt; R Markdown &gt; select custom libraries from the Zotero dropdown.\nThe you can type @ and you will see a dropdown of the references in your libraries. You can then select the ones to add. If you don’t see the one you need, you can paste in the DOI and it will be added to your references file (with all the info). The references will be added to your references section of your book automatically.\nSee the references.qmd file for how to include the references.\n\n@ansley1981 will produce Ansley and Davis (1981)\n[@ansley1981] will produce (Ansley and Davis 1981).\n\n\n\n\n\nAnsley, H. L. H., and C. D. Davis. 1981. “Migration and Standing Stock of Fishes Associated with Artificial and Natural Reefs on Georgia’s Outer Continental Shelf.” Brunswick, Georgia, USA.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>References</span>"
    ]
  },
  {
    "objectID": "content/references.html",
    "href": "content/references.html",
    "title": "References",
    "section": "",
    "text": "Ansley, H. L. H., and C. D. Davis. 1981. “Migration and Standing\nStock of Fishes Associated with Artificial and Natural Reefs on\nGeorgia’s Outer Continental Shelf.” Brunswick,\nGeorgia, USA.",
    "crumbs": [
      "References"
    ]
  }
]